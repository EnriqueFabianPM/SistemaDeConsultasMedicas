// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace WebServices.Data;

public partial class Consultories_System_DevContext : DbContext
{
    public Consultories_System_DevContext()
    {
    }

    public Consultories_System_DevContext(DbContextOptions<Consultories_System_DevContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Consultories> Consultories { get; set; }

    public virtual DbSet<Medical_Appointments> Medical_Appointments { get; set; }

    public virtual DbSet<Municipalities> Municipalities { get; set; }

    public virtual DbSet<Roles> Roles { get; set; }

    public virtual DbSet<Sexes> Sexes { get; set; }

    public virtual DbSet<Status> Status { get; set; }

    public virtual DbSet<Types> Types { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=192.168.192.193,1433;Initial Catalog=Consultories_System_Dev;Persist Security Info=True;User ID=UTSC_USER;Password=S1stem@5.UTSC2025;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasDefaultSchema("db_datareader");

        modelBuilder.Entity<Consultories>(entity =>
        {
            entity.HasKey(e => e.Id_Consultory).HasName("PK__Consulto__F3FE3AA1564383A6");

            entity.ToTable("Consultories", "dbo");

            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.Email).IsUnicode(false);
            entity.Property(e => e.Latitude)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Length)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Name).IsUnicode(false);

            entity.HasOne(d => d.fk_MunicipalityNavigation).WithMany(p => p.Consultories)
                .HasForeignKey(d => d.fk_Municipality)
                .HasConstraintName("FK_Consultories_Municipalities");
        });

        modelBuilder.Entity<Medical_Appointments>(entity =>
        {
            entity.HasKey(e => e.Id_Appointment).HasName("PK__Medical___6ECCF90271E6728F");

            entity.ToTable("Medical_Appointments", "dbo");

            entity.Property(e => e.Appointment_Date).HasColumnType("date");
            entity.Property(e => e.Created_Date).HasColumnType("date");

            entity.HasOne(d => d.fk_DoctorNavigation).WithMany(p => p.Medical_Appointmentsfk_DoctorNavigation)
                .HasForeignKey(d => d.fk_Doctor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MEDICAL_APPOINTMENTS_DOCTOR");

            entity.HasOne(d => d.fk_PatientNavigation).WithMany(p => p.Medical_Appointmentsfk_PatientNavigation)
                .HasForeignKey(d => d.fk_Patient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MEDICAL_APPOINTMENTS_PATIENT");

            entity.HasOne(d => d.fk_StatusNavigation).WithMany(p => p.Medical_Appointments)
                .HasForeignKey(d => d.fk_Status)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MEDICAL_APPOINTMENTS_STATUS");
        });

        modelBuilder.Entity<Municipalities>(entity =>
        {
            entity.HasKey(e => e.Id_Municipality);

            entity.ToTable("Municipalities", "dbo");

            entity.Property(e => e.Name)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<Roles>(entity =>
        {
            entity.HasKey(e => e.Id_Role).HasName("PK__Roles__34ADFA605FD948DE");

            entity.ToTable("Roles", "dbo");

            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.Name)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<Sexes>(entity =>
        {
            entity.HasKey(e => e.Id_Sex).HasName("PK__Sexes__552797C267E4D264");

            entity.ToTable("Sexes", "dbo");

            entity.Property(e => e.Name)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<Status>(entity =>
        {
            entity.HasKey(e => e.Id_Status).HasName("PK_STATUS");

            entity.ToTable("Status", "dbo");

            entity.Property(e => e.Name)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<Types>(entity =>
        {
            entity.HasKey(e => e.Id_Type).HasName("PK__Types__1A20A3D566528E86");

            entity.ToTable("Types", "dbo");

            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.Name)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<Users>(entity =>
        {
            entity.HasKey(e => e.Id_User).HasName("PK__Users__D03DEDCB7794E24E");

            entity.ToTable("Users", "dbo");

            entity.Property(e => e.Active).HasDefaultValue(true);
            entity.Property(e => e.Email)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Name)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Phone).IsUnicode(false);

            entity.HasOne(d => d.fk_ConsultoryNavigation).WithMany(p => p.Users)
                .HasForeignKey(d => d.fk_Consultory)
                .HasConstraintName("FK_USERS_CONSULTORIES");

            entity.HasOne(d => d.fk_RoleNavigation).WithMany(p => p.Users)
                .HasForeignKey(d => d.fk_Role)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USERS_ROLES");

            entity.HasOne(d => d.fk_SexNavigation).WithMany(p => p.Users)
                .HasForeignKey(d => d.fk_Sex)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USERS_SEXES");

            entity.HasOne(d => d.fk_TypeNavigation).WithMany(p => p.Users)
                .HasForeignKey(d => d.fk_Type)
                .HasConstraintName("FK_USERS_TYPES");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}